KR[1].KRName := 'KRBP1';
KR[1].ToOp := FALSE ;
KR[1].ToCl := FALSE;
KR[1].Opening := FALSE;
KR[1].Closing := FALSE;
KR[1].IsOp := FALSE;
KR[1].IsCl := FALSE;
KR[1].More := FALSE;
KR[1].Less := FALSE;
KR[1].SetPos := FALSE;
KR[1].SetPosOpening := FALSE;
KR[1].SetPosClosing := FALSE;
KR[1].Stop := FALSE;
KR[1].Error := FALSE;
KR[1].VtoOp := FALSE;
KR[1].VtoCl := FALSE;
KR[1].KRType := 0;
KR[1].Pos := 0.000000e+000;
KR[1].PosSp := 0.000000e+000;
KR[1].SpIsOp := 0.000000e+000;
KR[1].SpIsCl := 0.000000e+000;
KR[1].Nch_IsOp :=0;
KR[1].Nch_IsCl := 0;
KR[1].Nch_PV := 0;
KR[1].Nch_Pos := 0;
KR[1].Nch_VtoOp := 0;
KR[1].Nch_VtoCl := 0;
KR[1].TMROP.TCur := 0.000000e+000;
KR[1].TMROP.TOpen := 130.0;
KR[1].TMROP.TMore := 0.5;
KR[1].TMROP.TPrev := 0.000000e+000;
KR[1].TMROP.Enable := FALSE;
KR[1].TMROP.Act := FALSE;
KR[1].TMRCL.TCur := 0.000000e+000;
KR[1].TMRCL.TClose := 130.0;
KR[1].TMRCL.TLess := 0.5;
KR[1].TMRCL.TPrev := 0.000000e+000;
KR[1].TMRCL.Enable := FALSE;
KR[1].TMRCL.Act := FALSE;
KR[1].TMRST.TCur := 0.000000e+000;
KR[1].TMRST.TPrev := 0.000000e+000;
KR[1].TMRST.Enable := FALSE;
KR[1].TMRST.Act := FALSE;
KR[2].KRName := 'KRPP1';
KR[2].ToOp := FALSE ;
KR[2].ToCl := FALSE;
KR[2].Opening := FALSE;
KR[2].Closing := FALSE;
KR[2].IsOp := FALSE;
KR[2].IsCl := FALSE;
KR[2].More := FALSE;
KR[2].Less := FALSE;
KR[2].SetPos := FALSE;
KR[2].SetPosOpening := FALSE;
KR[2].SetPosClosing := FALSE;
KR[2].Stop := FALSE;
KR[2].Error := FALSE;
KR[2].VtoOp := FALSE;
KR[2].VtoCl := FALSE;
KR[2].KRType := 0;
KR[2].Pos := 0.000000e+000;
KR[2].PosSp := 0.000000e+000;
KR[2].SpIsOp := 0.000000e+000;
KR[2].SpIsCl := 0.000000e+000;
KR[2].Nch_IsOp :=0;
KR[2].Nch_IsCl := 0;
KR[2].Nch_PV := 0;
KR[2].Nch_Pos := 0;
KR[2].Nch_VtoOp := 0;
KR[2].Nch_VtoCl := 0;
KR[2].TMROP.TCur := 0.000000e+000;
KR[2].TMROP.TOpen := 130.0;
KR[2].TMROP.TMore := 0.5;
KR[2].TMROP.TPrev := 0.000000e+000;
KR[2].TMROP.Enable := FALSE;
KR[2].TMROP.Act := FALSE;
KR[2].TMRCL.TCur := 0.000000e+000;
KR[2].TMRCL.TClose := 130.0;
KR[2].TMRCL.TLess := 0.5;
KR[2].TMRCL.TPrev := 0.000000e+000;
KR[2].TMRCL.Enable := FALSE;
KR[2].TMRCL.Act := FALSE;
KR[2].TMRST.TCur := 0.000000e+000;
KR[2].TMRST.TPrev := 0.000000e+000;
KR[2].TMRST.Enable := FALSE;
KR[2].TMRST.Act := FALSE;
KR[3].KRName := 'KRUP1';
KR[3].ToOp := FALSE ;
KR[3].ToCl := FALSE;
KR[3].Opening := FALSE;
KR[3].Closing := FALSE;
KR[3].IsOp := FALSE;
KR[3].IsCl := FALSE;
KR[3].More := FALSE;
KR[3].Less := FALSE;
KR[3].SetPos := FALSE;
KR[3].SetPosOpening := FALSE;
KR[3].SetPosClosing := FALSE;
KR[3].Stop := FALSE;
KR[3].Error := FALSE;
KR[3].VtoOp := FALSE;
KR[3].VtoCl := FALSE;
KR[3].KRType := 0;
KR[3].Pos := 0.000000e+000;
KR[3].PosSp := 0.000000e+000;
KR[3].SpIsOp := 0.000000e+000;
KR[3].SpIsCl := 0.000000e+000;
KR[3].Nch_IsOp :=0;
KR[3].Nch_IsCl := 0;
KR[3].Nch_PV := 0;
KR[3].Nch_Pos := 0;
KR[3].Nch_VtoOp := 0;
KR[3].Nch_VtoCl := 0;
KR[3].TMROP.TCur := 0.000000e+000;
KR[3].TMROP.TOpen := 130.0;
KR[3].TMROP.TMore := 0.5;
KR[3].TMROP.TPrev := 0.000000e+000;
KR[3].TMROP.Enable := FALSE;
KR[3].TMROP.Act := FALSE;
KR[3].TMRCL.TCur := 0.000000e+000;
KR[3].TMRCL.TClose := 130.0;
KR[3].TMRCL.TLess := 0.5;
KR[3].TMRCL.TPrev := 0.000000e+000;
KR[3].TMRCL.Enable := FALSE;
KR[3].TMRCL.Act := FALSE;
KR[3].TMRST.TCur := 0.000000e+000;
KR[3].TMRST.TPrev := 0.000000e+000;
KR[3].TMRST.Enable := FALSE;
KR[3].TMRST.Act := FALSE;
KR[4].KRName := 'KRBP3';
KR[4].ToOp := FALSE ;
KR[4].ToCl := FALSE;
KR[4].Opening := FALSE;
KR[4].Closing := FALSE;
KR[4].IsOp := FALSE;
KR[4].IsCl := FALSE;
KR[4].More := FALSE;
KR[4].Less := FALSE;
KR[4].SetPos := FALSE;
KR[4].SetPosOpening := FALSE;
KR[4].SetPosClosing := FALSE;
KR[4].Stop := FALSE;
KR[4].Error := FALSE;
KR[4].VtoOp := FALSE;
KR[4].VtoCl := FALSE;
KR[4].KRType := 0;
KR[4].Pos := 0.000000e+000;
KR[4].PosSp := 0.000000e+000;
KR[4].SpIsOp := 0.000000e+000;
KR[4].SpIsCl := 0.000000e+000;
KR[4].Nch_IsOp :=0;
KR[4].Nch_IsCl := 0;
KR[4].Nch_PV := 0;
KR[4].Nch_Pos := 0;
KR[4].Nch_VtoOp := 0;
KR[4].Nch_VtoCl := 0;
KR[4].TMROP.TCur := 0.000000e+000;
KR[4].TMROP.TOpen := 130.0;
KR[4].TMROP.TMore := 0.5;
KR[4].TMROP.TPrev := 0.000000e+000;
KR[4].TMROP.Enable := FALSE;
KR[4].TMROP.Act := FALSE;
KR[4].TMRCL.TCur := 0.000000e+000;
KR[4].TMRCL.TClose := 130.0;
KR[4].TMRCL.TLess := 0.5;
KR[4].TMRCL.TPrev := 0.000000e+000;
KR[4].TMRCL.Enable := FALSE;
KR[4].TMRCL.Act := FALSE;
KR[4].TMRST.TCur := 0.000000e+000;
KR[4].TMRST.TPrev := 0.000000e+000;
KR[4].TMRST.Enable := FALSE;
KR[4].TMRST.Act := FALSE;
KR[5].KRName := 'KRPP3';
KR[5].ToOp := FALSE ;
KR[5].ToCl := FALSE;
KR[5].Opening := FALSE;
KR[5].Closing := FALSE;
KR[5].IsOp := FALSE;
KR[5].IsCl := FALSE;
KR[5].More := FALSE;
KR[5].Less := FALSE;
KR[5].SetPos := FALSE;
KR[5].SetPosOpening := FALSE;
KR[5].SetPosClosing := FALSE;
KR[5].Stop := FALSE;
KR[5].Error := FALSE;
KR[5].VtoOp := FALSE;
KR[5].VtoCl := FALSE;
KR[5].KRType := 0;
KR[5].Pos := 0.000000e+000;
KR[5].PosSp := 0.000000e+000;
KR[5].SpIsOp := 0.000000e+000;
KR[5].SpIsCl := 0.000000e+000;
KR[5].Nch_IsOp :=0;
KR[5].Nch_IsCl := 0;
KR[5].Nch_PV := 0;
KR[5].Nch_Pos := 0;
KR[5].Nch_VtoOp := 0;
KR[5].Nch_VtoCl := 0;
KR[5].TMROP.TCur := 0.000000e+000;
KR[5].TMROP.TOpen := 130.0;
KR[5].TMROP.TMore := 0.5;
KR[5].TMROP.TPrev := 0.000000e+000;
KR[5].TMROP.Enable := FALSE;
KR[5].TMROP.Act := FALSE;
KR[5].TMRCL.TCur := 0.000000e+000;
KR[5].TMRCL.TClose := 130.0;
KR[5].TMRCL.TLess := 0.5;
KR[5].TMRCL.TPrev := 0.000000e+000;
KR[5].TMRCL.Enable := FALSE;
KR[5].TMRCL.Act := FALSE;
KR[5].TMRST.TCur := 0.000000e+000;
KR[5].TMRST.TPrev := 0.000000e+000;
KR[5].TMRST.Enable := FALSE;
KR[5].TMRST.Act := FALSE;
KR[6].KRName := 'KRUD3';
KR[6].ToOp := FALSE ;
KR[6].ToCl := FALSE;
KR[6].Opening := FALSE;
KR[6].Closing := FALSE;
KR[6].IsOp := FALSE;
KR[6].IsCl := FALSE;
KR[6].More := FALSE;
KR[6].Less := FALSE;
KR[6].SetPos := FALSE;
KR[6].SetPosOpening := FALSE;
KR[6].SetPosClosing := FALSE;
KR[6].Stop := FALSE;
KR[6].Error := FALSE;
KR[6].VtoOp := FALSE;
KR[6].VtoCl := FALSE;
KR[6].KRType := 0;
KR[6].Pos := 0.000000e+000;
KR[6].PosSp := 0.000000e+000;
KR[6].SpIsOp := 0.000000e+000;
KR[6].SpIsCl := 0.000000e+000;
KR[6].Nch_IsOp :=0;
KR[6].Nch_IsCl := 0;
KR[6].Nch_PV := 0;
KR[6].Nch_Pos := 0;
KR[6].Nch_VtoOp := 0;
KR[6].Nch_VtoCl := 0;
KR[6].TMROP.TCur := 0.000000e+000;
KR[6].TMROP.TOpen := 130.0;
KR[6].TMROP.TMore := 0.5;
KR[6].TMROP.TPrev := 0.000000e+000;
KR[6].TMROP.Enable := FALSE;
KR[6].TMROP.Act := FALSE;
KR[6].TMRCL.TCur := 0.000000e+000;
KR[6].TMRCL.TClose := 130.0;
KR[6].TMRCL.TLess := 0.5;
KR[6].TMRCL.TPrev := 0.000000e+000;
KR[6].TMRCL.Enable := FALSE;
KR[6].TMRCL.Act := FALSE;
KR[6].TMRST.TCur := 0.000000e+000;
KR[6].TMRST.TPrev := 0.000000e+000;
KR[6].TMRST.Enable := FALSE;
KR[6].TMRST.Act := FALSE;
KR[7].KRName := ' ';
KR[7].ToOp := FALSE ;
KR[7].ToCl := FALSE;
KR[7].Opening := FALSE;
KR[7].Closing := FALSE;
KR[7].IsOp := FALSE;
KR[7].IsCl := FALSE;
KR[7].More := FALSE;
KR[7].Less := FALSE;
KR[7].SetPos := FALSE;
KR[7].SetPosOpening := FALSE;
KR[7].SetPosClosing := FALSE;
KR[7].Stop := FALSE;
KR[7].Error := FALSE;
KR[7].VtoOp := FALSE;
KR[7].VtoCl := FALSE;
KR[7].KRType := 0;
KR[7].Pos := 0.000000e+000;
KR[7].PosSp := 0.000000e+000;
KR[7].SpIsOp := 0.000000e+000;
KR[7].SpIsCl := 0.000000e+000;
KR[7].Nch_IsOp :=0;
KR[7].Nch_IsCl := 0;
KR[7].Nch_PV := 0;
KR[7].Nch_Pos := 0;
KR[7].Nch_VtoOp := 0;
KR[7].Nch_VtoCl := 0;
KR[7].TMROP.TCur := 0.000000e+000;
KR[7].TMROP.TOpen := 130.0;
KR[7].TMROP.TMore := 0.5;
KR[7].TMROP.TPrev := 0.000000e+000;
KR[7].TMROP.Enable := FALSE;
KR[7].TMROP.Act := FALSE;
KR[7].TMRCL.TCur := 0.000000e+000;
KR[7].TMRCL.TClose := 130.0;
KR[7].TMRCL.TLess := 0.5;
KR[7].TMRCL.TPrev := 0.000000e+000;
KR[7].TMRCL.Enable := FALSE;
KR[7].TMRCL.Act := FALSE;
KR[7].TMRST.TCur := 0.000000e+000;
KR[7].TMRST.TPrev := 0.000000e+000;
KR[7].TMRST.Enable := FALSE;
KR[7].TMRST.Act := FALSE;
KR[8].KRName := ' ';
KR[8].ToOp := FALSE ;
KR[8].ToCl := FALSE;
KR[8].Opening := FALSE;
KR[8].Closing := FALSE;
KR[8].IsOp := FALSE;
KR[8].IsCl := FALSE;
KR[8].More := FALSE;
KR[8].Less := FALSE;
KR[8].SetPos := FALSE;
KR[8].SetPosOpening := FALSE;
KR[8].SetPosClosing := FALSE;
KR[8].Stop := FALSE;
KR[8].Error := FALSE;
KR[8].VtoOp := FALSE;
KR[8].VtoCl := FALSE;
KR[8].KRType := 0;
KR[8].Pos := 0.000000e+000;
KR[8].PosSp := 0.000000e+000;
KR[8].SpIsOp := 0.000000e+000;
KR[8].SpIsCl := 0.000000e+000;
KR[8].Nch_IsOp :=0;
KR[8].Nch_IsCl := 0;
KR[8].Nch_PV := 0;
KR[8].Nch_Pos := 0;
KR[8].Nch_VtoOp := 0;
KR[8].Nch_VtoCl := 0;
KR[8].TMROP.TCur := 0.000000e+000;
KR[8].TMROP.TOpen := 130.0;
KR[8].TMROP.TMore := 0.5;
KR[8].TMROP.TPrev := 0.000000e+000;
KR[8].TMROP.Enable := FALSE;
KR[8].TMROP.Act := FALSE;
KR[8].TMRCL.TCur := 0.000000e+000;
KR[8].TMRCL.TClose := 130.0;
KR[8].TMRCL.TLess := 0.5;
KR[8].TMRCL.TPrev := 0.000000e+000;
KR[8].TMRCL.Enable := FALSE;
KR[8].TMRCL.Act := FALSE;
KR[8].TMRST.TCur := 0.000000e+000;
KR[8].TMRST.TPrev := 0.000000e+000;
KR[8].TMRST.Enable := FALSE;
KR[8].TMRST.Act := FALSE;
KR[9].KRName := ' ';
KR[9].ToOp := FALSE ;
KR[9].ToCl := FALSE;
KR[9].Opening := FALSE;
KR[9].Closing := FALSE;
KR[9].IsOp := FALSE;
KR[9].IsCl := FALSE;
KR[9].More := FALSE;
KR[9].Less := FALSE;
KR[9].SetPos := FALSE;
KR[9].SetPosOpening := FALSE;
KR[9].SetPosClosing := FALSE;
KR[9].Stop := FALSE;
KR[9].Error := FALSE;
KR[9].VtoOp := FALSE;
KR[9].VtoCl := FALSE;
KR[9].KRType := 0;
KR[9].Pos := 0.000000e+000;
KR[9].PosSp := 0.000000e+000;
KR[9].SpIsOp := 0.000000e+000;
KR[9].SpIsCl := 0.000000e+000;
KR[9].Nch_IsOp :=0;
KR[9].Nch_IsCl := 0;
KR[9].Nch_PV := 0;
KR[9].Nch_Pos := 0;
KR[9].Nch_VtoOp := 0;
KR[9].Nch_VtoCl := 0;
KR[9].TMROP.TCur := 0.000000e+000;
KR[9].TMROP.TOpen := 130.0;
KR[9].TMROP.TMore := 0.5;
KR[9].TMROP.TPrev := 0.000000e+000;
KR[9].TMROP.Enable := FALSE;
KR[9].TMROP.Act := FALSE;
KR[9].TMRCL.TCur := 0.000000e+000;
KR[9].TMRCL.TClose := 130.0;
KR[9].TMRCL.TLess := 0.5;
KR[9].TMRCL.TPrev := 0.000000e+000;
KR[9].TMRCL.Enable := FALSE;
KR[9].TMRCL.Act := FALSE;
KR[9].TMRST.TCur := 0.000000e+000;
KR[9].TMRST.TPrev := 0.000000e+000;
KR[9].TMRST.Enable := FALSE;
KR[9].TMRST.Act := FALSE;
KR[10].KRName := ' ';
KR[10].ToOp := FALSE ;
KR[10].ToCl := FALSE;
KR[10].Opening := FALSE;
KR[10].Closing := FALSE;
KR[10].IsOp := FALSE;
KR[10].IsCl := FALSE;
KR[10].More := FALSE;
KR[10].Less := FALSE;
KR[10].SetPos := FALSE;
KR[10].SetPosOpening := FALSE;
KR[10].SetPosClosing := FALSE;
KR[10].Stop := FALSE;
KR[10].Error := FALSE;
KR[10].VtoOp := FALSE;
KR[10].VtoCl := FALSE;
KR[10].KRType := 0;
KR[10].Pos := 0.000000e+000;
KR[10].PosSp := 0.000000e+000;
KR[10].SpIsOp := 0.000000e+000;
KR[10].SpIsCl := 0.000000e+000;
KR[10].Nch_IsOp :=0;
KR[10].Nch_IsCl := 0;
KR[10].Nch_PV := 0;
KR[10].Nch_Pos := 0;
KR[10].Nch_VtoOp := 0;
KR[10].Nch_VtoCl := 0;
KR[10].TMROP.TCur := 0.000000e+000;
KR[10].TMROP.TOpen := 130.0;
KR[10].TMROP.TMore := 0.5;
KR[10].TMROP.TPrev := 0.000000e+000;
KR[10].TMROP.Enable := FALSE;
KR[10].TMROP.Act := FALSE;
KR[10].TMRCL.TCur := 0.000000e+000;
KR[10].TMRCL.TClose := 130.0;
KR[10].TMRCL.TLess := 0.5;
KR[10].TMRCL.TPrev := 0.000000e+000;
KR[10].TMRCL.Enable := FALSE;
KR[10].TMRCL.Act := FALSE;
KR[10].TMRST.TCur := 0.000000e+000;
KR[10].TMRST.TPrev := 0.000000e+000;
KR[10].TMRST.Enable := FALSE;
KR[10].TMRST.Act := FALSE;
KR[11].KRName := ' ';
KR[11].ToOp := FALSE ;
KR[11].ToCl := FALSE;
KR[11].Opening := FALSE;
KR[11].Closing := FALSE;
KR[11].IsOp := FALSE;
KR[11].IsCl := FALSE;
KR[11].More := FALSE;
KR[11].Less := FALSE;
KR[11].SetPos := FALSE;
KR[11].SetPosOpening := FALSE;
KR[11].SetPosClosing := FALSE;
KR[11].Stop := FALSE;
KR[11].Error := FALSE;
KR[11].VtoOp := FALSE;
KR[11].VtoCl := FALSE;
KR[11].KRType := 0;
KR[11].Pos := 0.000000e+000;
KR[11].PosSp := 0.000000e+000;
KR[11].SpIsOp := 0.000000e+000;
KR[11].SpIsCl := 0.000000e+000;
KR[11].Nch_IsOp :=0;
KR[11].Nch_IsCl := 0;
KR[11].Nch_PV := 0;
KR[11].Nch_Pos := 0;
KR[11].Nch_VtoOp := 0;
KR[11].Nch_VtoCl := 0;
KR[11].TMROP.TCur := 0.000000e+000;
KR[11].TMROP.TOpen := 130.0;
KR[11].TMROP.TMore := 0.5;
KR[11].TMROP.TPrev := 0.000000e+000;
KR[11].TMROP.Enable := FALSE;
KR[11].TMROP.Act := FALSE;
KR[11].TMRCL.TCur := 0.000000e+000;
KR[11].TMRCL.TClose := 130.0;
KR[11].TMRCL.TLess := 0.5;
KR[11].TMRCL.TPrev := 0.000000e+000;
KR[11].TMRCL.Enable := FALSE;
KR[11].TMRCL.Act := FALSE;
KR[11].TMRST.TCur := 0.000000e+000;
KR[11].TMRST.TPrev := 0.000000e+000;
KR[11].TMRST.Enable := FALSE;
KR[11].TMRST.Act := FALSE;
KR[12].KRName := ' ';
KR[12].ToOp := FALSE ;
KR[12].ToCl := FALSE;
KR[12].Opening := FALSE;
KR[12].Closing := FALSE;
KR[12].IsOp := FALSE;
KR[12].IsCl := FALSE;
KR[12].More := FALSE;
KR[12].Less := FALSE;
KR[12].SetPos := FALSE;
KR[12].SetPosOpening := FALSE;
KR[12].SetPosClosing := FALSE;
KR[12].Stop := FALSE;
KR[12].Error := FALSE;
KR[12].VtoOp := FALSE;
KR[12].VtoCl := FALSE;
KR[12].KRType := 0;
KR[12].Pos := 0.000000e+000;
KR[12].PosSp := 0.000000e+000;
KR[12].SpIsOp := 0.000000e+000;
KR[12].SpIsCl := 0.000000e+000;
KR[12].Nch_IsOp :=0;
KR[12].Nch_IsCl := 0;
KR[12].Nch_PV := 0;
KR[12].Nch_Pos := 0;
KR[12].Nch_VtoOp := 0;
KR[12].Nch_VtoCl := 0;
KR[12].TMROP.TCur := 0.000000e+000;
KR[12].TMROP.TOpen := 130.0;
KR[12].TMROP.TMore := 0.5;
KR[12].TMROP.TPrev := 0.000000e+000;
KR[12].TMROP.Enable := FALSE;
KR[12].TMROP.Act := FALSE;
KR[12].TMRCL.TCur := 0.000000e+000;
KR[12].TMRCL.TClose := 130.0;
KR[12].TMRCL.TLess := 0.5;
KR[12].TMRCL.TPrev := 0.000000e+000;
KR[12].TMRCL.Enable := FALSE;
KR[12].TMRCL.Act := FALSE;
KR[12].TMRST.TCur := 0.000000e+000;
KR[12].TMRST.TPrev := 0.000000e+000;
KR[12].TMRST.Enable := FALSE;
KR[12].TMRST.Act := FALSE;
KR[13].KRName := ' ';
KR[13].ToOp := FALSE ;
KR[13].ToCl := FALSE;
KR[13].Opening := FALSE;
KR[13].Closing := FALSE;
KR[13].IsOp := FALSE;
KR[13].IsCl := FALSE;
KR[13].More := FALSE;
KR[13].Less := FALSE;
KR[13].SetPos := FALSE;
KR[13].SetPosOpening := FALSE;
KR[13].SetPosClosing := FALSE;
KR[13].Stop := FALSE;
KR[13].Error := FALSE;
KR[13].VtoOp := FALSE;
KR[13].VtoCl := FALSE;
KR[13].KRType := 0;
KR[13].Pos := 0.000000e+000;
KR[13].PosSp := 0.000000e+000;
KR[13].SpIsOp := 0.000000e+000;
KR[13].SpIsCl := 0.000000e+000;
KR[13].Nch_IsOp :=0;
KR[13].Nch_IsCl := 0;
KR[13].Nch_PV := 0;
KR[13].Nch_Pos := 0;
KR[13].Nch_VtoOp := 0;
KR[13].Nch_VtoCl := 0;
KR[13].TMROP.TCur := 0.000000e+000;
KR[13].TMROP.TOpen := 130.0;
KR[13].TMROP.TMore := 0.5;
KR[13].TMROP.TPrev := 0.000000e+000;
KR[13].TMROP.Enable := FALSE;
KR[13].TMROP.Act := FALSE;
KR[13].TMRCL.TCur := 0.000000e+000;
KR[13].TMRCL.TClose := 130.0;
KR[13].TMRCL.TLess := 0.5;
KR[13].TMRCL.TPrev := 0.000000e+000;
KR[13].TMRCL.Enable := FALSE;
KR[13].TMRCL.Act := FALSE;
KR[13].TMRST.TCur := 0.000000e+000;
KR[13].TMRST.TPrev := 0.000000e+000;
KR[13].TMRST.Enable := FALSE;
KR[13].TMRST.Act := FALSE;
KR[14].KRName := ' ';
KR[14].ToOp := FALSE ;
KR[14].ToCl := FALSE;
KR[14].Opening := FALSE;
KR[14].Closing := FALSE;
KR[14].IsOp := FALSE;
KR[14].IsCl := FALSE;
KR[14].More := FALSE;
KR[14].Less := FALSE;
KR[14].SetPos := FALSE;
KR[14].SetPosOpening := FALSE;
KR[14].SetPosClosing := FALSE;
KR[14].Stop := FALSE;
KR[14].Error := FALSE;
KR[14].VtoOp := FALSE;
KR[14].VtoCl := FALSE;
KR[14].KRType := 0;
KR[14].Pos := 0.000000e+000;
KR[14].PosSp := 0.000000e+000;
KR[14].SpIsOp := 0.000000e+000;
KR[14].SpIsCl := 0.000000e+000;
KR[14].Nch_IsOp :=0;
KR[14].Nch_IsCl := 0;
KR[14].Nch_PV := 0;
KR[14].Nch_Pos := 0;
KR[14].Nch_VtoOp := 0;
KR[14].Nch_VtoCl := 0;
KR[14].TMROP.TCur := 0.000000e+000;
KR[14].TMROP.TOpen := 130.0;
KR[14].TMROP.TMore := 0.5;
KR[14].TMROP.TPrev := 0.000000e+000;
KR[14].TMROP.Enable := FALSE;
KR[14].TMROP.Act := FALSE;
KR[14].TMRCL.TCur := 0.000000e+000;
KR[14].TMRCL.TClose := 130.0;
KR[14].TMRCL.TLess := 0.5;
KR[14].TMRCL.TPrev := 0.000000e+000;
KR[14].TMRCL.Enable := FALSE;
KR[14].TMRCL.Act := FALSE;
KR[14].TMRST.TCur := 0.000000e+000;
KR[14].TMRST.TPrev := 0.000000e+000;
KR[14].TMRST.Enable := FALSE;
KR[14].TMRST.Act := FALSE;
KR[15].KRName := ' ';
KR[15].ToOp := FALSE ;
KR[15].ToCl := FALSE;
KR[15].Opening := FALSE;
KR[15].Closing := FALSE;
KR[15].IsOp := FALSE;
KR[15].IsCl := FALSE;
KR[15].More := FALSE;
KR[15].Less := FALSE;
KR[15].SetPos := FALSE;
KR[15].SetPosOpening := FALSE;
KR[15].SetPosClosing := FALSE;
KR[15].Stop := FALSE;
KR[15].Error := FALSE;
KR[15].VtoOp := FALSE;
KR[15].VtoCl := FALSE;
KR[15].KRType := 0;
KR[15].Pos := 0.000000e+000;
KR[15].PosSp := 0.000000e+000;
KR[15].SpIsOp := 0.000000e+000;
KR[15].SpIsCl := 0.000000e+000;
KR[15].Nch_IsOp :=0;
KR[15].Nch_IsCl := 0;
KR[15].Nch_PV := 0;
KR[15].Nch_Pos := 0;
KR[15].Nch_VtoOp := 0;
KR[15].Nch_VtoCl := 0;
KR[15].TMROP.TCur := 0.000000e+000;
KR[15].TMROP.TOpen := 130.0;
KR[15].TMROP.TMore := 0.5;
KR[15].TMROP.TPrev := 0.000000e+000;
KR[15].TMROP.Enable := FALSE;
KR[15].TMROP.Act := FALSE;
KR[15].TMRCL.TCur := 0.000000e+000;
KR[15].TMRCL.TClose := 130.0;
KR[15].TMRCL.TLess := 0.5;
KR[15].TMRCL.TPrev := 0.000000e+000;
KR[15].TMRCL.Enable := FALSE;
KR[15].TMRCL.Act := FALSE;
KR[15].TMRST.TCur := 0.000000e+000;
KR[15].TMRST.TPrev := 0.000000e+000;
KR[15].TMRST.Enable := FALSE;
KR[15].TMRST.Act := FALSE;
KR[16].KRName := ' ';
KR[16].ToOp := FALSE ;
KR[16].ToCl := FALSE;
KR[16].Opening := FALSE;
KR[16].Closing := FALSE;
KR[16].IsOp := FALSE;
KR[16].IsCl := FALSE;
KR[16].More := FALSE;
KR[16].Less := FALSE;
KR[16].SetPos := FALSE;
KR[16].SetPosOpening := FALSE;
KR[16].SetPosClosing := FALSE;
KR[16].Stop := FALSE;
KR[16].Error := FALSE;
KR[16].VtoOp := FALSE;
KR[16].VtoCl := FALSE;
KR[16].KRType := 0;
KR[16].Pos := 0.000000e+000;
KR[16].PosSp := 0.000000e+000;
KR[16].SpIsOp := 0.000000e+000;
KR[16].SpIsCl := 0.000000e+000;
KR[16].Nch_IsOp :=0;
KR[16].Nch_IsCl := 0;
KR[16].Nch_PV := 0;
KR[16].Nch_Pos := 0;
KR[16].Nch_VtoOp := 0;
KR[16].Nch_VtoCl := 0;
KR[16].TMROP.TCur := 0.000000e+000;
KR[16].TMROP.TOpen := 130.0;
KR[16].TMROP.TMore := 0.5;
KR[16].TMROP.TPrev := 0.000000e+000;
KR[16].TMROP.Enable := FALSE;
KR[16].TMROP.Act := FALSE;
KR[16].TMRCL.TCur := 0.000000e+000;
KR[16].TMRCL.TClose := 130.0;
KR[16].TMRCL.TLess := 0.5;
KR[16].TMRCL.TPrev := 0.000000e+000;
KR[16].TMRCL.Enable := FALSE;
KR[16].TMRCL.Act := FALSE;
KR[16].TMRST.TCur := 0.000000e+000;
KR[16].TMRST.TPrev := 0.000000e+000;
KR[16].TMRST.Enable := FALSE;
KR[16].TMRST.Act := FALSE;
KR[17].KRName := ' ';
KR[17].ToOp := FALSE ;
KR[17].ToCl := FALSE;
KR[17].Opening := FALSE;
KR[17].Closing := FALSE;
KR[17].IsOp := FALSE;
KR[17].IsCl := FALSE;
KR[17].More := FALSE;
KR[17].Less := FALSE;
KR[17].SetPos := FALSE;
KR[17].SetPosOpening := FALSE;
KR[17].SetPosClosing := FALSE;
KR[17].Stop := FALSE;
KR[17].Error := FALSE;
KR[17].VtoOp := FALSE;
KR[17].VtoCl := FALSE;
KR[17].KRType := 0;
KR[17].Pos := 0.000000e+000;
KR[17].PosSp := 0.000000e+000;
KR[17].SpIsOp := 0.000000e+000;
KR[17].SpIsCl := 0.000000e+000;
KR[17].Nch_IsOp :=0;
KR[17].Nch_IsCl := 0;
KR[17].Nch_PV := 0;
KR[17].Nch_Pos := 0;
KR[17].Nch_VtoOp := 0;
KR[17].Nch_VtoCl := 0;
KR[17].TMROP.TCur := 0.000000e+000;
KR[17].TMROP.TOpen := 130.0;
KR[17].TMROP.TMore := 0.5;
KR[17].TMROP.TPrev := 0.000000e+000;
KR[17].TMROP.Enable := FALSE;
KR[17].TMROP.Act := FALSE;
KR[17].TMRCL.TCur := 0.000000e+000;
KR[17].TMRCL.TClose := 130.0;
KR[17].TMRCL.TLess := 0.5;
KR[17].TMRCL.TPrev := 0.000000e+000;
KR[17].TMRCL.Enable := FALSE;
KR[17].TMRCL.Act := FALSE;
KR[17].TMRST.TCur := 0.000000e+000;
KR[17].TMRST.TPrev := 0.000000e+000;
KR[17].TMRST.Enable := FALSE;
KR[17].TMRST.Act := FALSE;
KR[18].KRName := ' ';
KR[18].ToOp := FALSE ;
KR[18].ToCl := FALSE;
KR[18].Opening := FALSE;
KR[18].Closing := FALSE;
KR[18].IsOp := FALSE;
KR[18].IsCl := FALSE;
KR[18].More := FALSE;
KR[18].Less := FALSE;
KR[18].SetPos := FALSE;
KR[18].SetPosOpening := FALSE;
KR[18].SetPosClosing := FALSE;
KR[18].Stop := FALSE;
KR[18].Error := FALSE;
KR[18].VtoOp := FALSE;
KR[18].VtoCl := FALSE;
KR[18].KRType := 0;
KR[18].Pos := 0.000000e+000;
KR[18].PosSp := 0.000000e+000;
KR[18].SpIsOp := 0.000000e+000;
KR[18].SpIsCl := 0.000000e+000;
KR[18].Nch_IsOp :=0;
KR[18].Nch_IsCl := 0;
KR[18].Nch_PV := 0;
KR[18].Nch_Pos := 0;
KR[18].Nch_VtoOp := 0;
KR[18].Nch_VtoCl := 0;
KR[18].TMROP.TCur := 0.000000e+000;
KR[18].TMROP.TOpen := 130.0;
KR[18].TMROP.TMore := 0.5;
KR[18].TMROP.TPrev := 0.000000e+000;
KR[18].TMROP.Enable := FALSE;
KR[18].TMROP.Act := FALSE;
KR[18].TMRCL.TCur := 0.000000e+000;
KR[18].TMRCL.TClose := 130.0;
KR[18].TMRCL.TLess := 0.5;
KR[18].TMRCL.TPrev := 0.000000e+000;
KR[18].TMRCL.Enable := FALSE;
KR[18].TMRCL.Act := FALSE;
KR[18].TMRST.TCur := 0.000000e+000;
KR[18].TMRST.TPrev := 0.000000e+000;
KR[18].TMRST.Enable := FALSE;
KR[18].TMRST.Act := FALSE;
KR[19].KRName := ' ';
KR[19].ToOp := FALSE ;
KR[19].ToCl := FALSE;
KR[19].Opening := FALSE;
KR[19].Closing := FALSE;
KR[19].IsOp := FALSE;
KR[19].IsCl := FALSE;
KR[19].More := FALSE;
KR[19].Less := FALSE;
KR[19].SetPos := FALSE;
KR[19].SetPosOpening := FALSE;
KR[19].SetPosClosing := FALSE;
KR[19].Stop := FALSE;
KR[19].Error := FALSE;
KR[19].VtoOp := FALSE;
KR[19].VtoCl := FALSE;
KR[19].KRType := 0;
KR[19].Pos := 0.000000e+000;
KR[19].PosSp := 0.000000e+000;
KR[19].SpIsOp := 0.000000e+000;
KR[19].SpIsCl := 0.000000e+000;
KR[19].Nch_IsOp :=0;
KR[19].Nch_IsCl := 0;
KR[19].Nch_PV := 0;
KR[19].Nch_Pos := 0;
KR[19].Nch_VtoOp := 0;
KR[19].Nch_VtoCl := 0;
KR[19].TMROP.TCur := 0.000000e+000;
KR[19].TMROP.TOpen := 130.0;
KR[19].TMROP.TMore := 0.5;
KR[19].TMROP.TPrev := 0.000000e+000;
KR[19].TMROP.Enable := FALSE;
KR[19].TMROP.Act := FALSE;
KR[19].TMRCL.TCur := 0.000000e+000;
KR[19].TMRCL.TClose := 130.0;
KR[19].TMRCL.TLess := 0.5;
KR[19].TMRCL.TPrev := 0.000000e+000;
KR[19].TMRCL.Enable := FALSE;
KR[19].TMRCL.Act := FALSE;
KR[19].TMRST.TCur := 0.000000e+000;
KR[19].TMRST.TPrev := 0.000000e+000;
KR[19].TMRST.Enable := FALSE;
KR[19].TMRST.Act := FALSE;
KR[20].KRName := ' ';
KR[20].ToOp := FALSE ;
KR[20].ToCl := FALSE;
KR[20].Opening := FALSE;
KR[20].Closing := FALSE;
KR[20].IsOp := FALSE;
KR[20].IsCl := FALSE;
KR[20].More := FALSE;
KR[20].Less := FALSE;
KR[20].SetPos := FALSE;
KR[20].SetPosOpening := FALSE;
KR[20].SetPosClosing := FALSE;
KR[20].Stop := FALSE;
KR[20].Error := FALSE;
KR[20].VtoOp := FALSE;
KR[20].VtoCl := FALSE;
KR[20].KRType := 0;
KR[20].Pos := 0.000000e+000;
KR[20].PosSp := 0.000000e+000;
KR[20].SpIsOp := 0.000000e+000;
KR[20].SpIsCl := 0.000000e+000;
KR[20].Nch_IsOp :=0;
KR[20].Nch_IsCl := 0;
KR[20].Nch_PV := 0;
KR[20].Nch_Pos := 0;
KR[20].Nch_VtoOp := 0;
KR[20].Nch_VtoCl := 0;
KR[20].TMROP.TCur := 0.000000e+000;
KR[20].TMROP.TOpen := 130.0;
KR[20].TMROP.TMore := 0.5;
KR[20].TMROP.TPrev := 0.000000e+000;
KR[20].TMROP.Enable := FALSE;
KR[20].TMROP.Act := FALSE;
KR[20].TMRCL.TCur := 0.000000e+000;
KR[20].TMRCL.TClose := 130.0;
KR[20].TMRCL.TLess := 0.5;
KR[20].TMRCL.TPrev := 0.000000e+000;
KR[20].TMRCL.Enable := FALSE;
KR[20].TMRCL.Act := FALSE;
KR[20].TMRST.TCur := 0.000000e+000;
KR[20].TMRST.TPrev := 0.000000e+000;
KR[20].TMRST.Enable := FALSE;
KR[20].TMRST.Act := FALSE;
KR[21].KRName := ' ';
KR[21].ToOp := FALSE ;
KR[21].ToCl := FALSE;
KR[21].Opening := FALSE;
KR[21].Closing := FALSE;
KR[21].IsOp := FALSE;
KR[21].IsCl := FALSE;
KR[21].More := FALSE;
KR[21].Less := FALSE;
KR[21].SetPos := FALSE;
KR[21].SetPosOpening := FALSE;
KR[21].SetPosClosing := FALSE;
KR[21].Stop := FALSE;
KR[21].Error := FALSE;
KR[21].VtoOp := FALSE;
KR[21].VtoCl := FALSE;
KR[21].KRType := 0;
KR[21].Pos := 0.000000e+000;
KR[21].PosSp := 0.000000e+000;
KR[21].SpIsOp := 0.000000e+000;
KR[21].SpIsCl := 0.000000e+000;
KR[21].Nch_IsOp :=0;
KR[21].Nch_IsCl := 0;
KR[21].Nch_PV := 0;
KR[21].Nch_Pos := 0;
KR[21].Nch_VtoOp := 0;
KR[21].Nch_VtoCl := 0;
KR[21].TMROP.TCur := 0.000000e+000;
KR[21].TMROP.TOpen := 130.0;
KR[21].TMROP.TMore := 0.5;
KR[21].TMROP.TPrev := 0.000000e+000;
KR[21].TMROP.Enable := FALSE;
KR[21].TMROP.Act := FALSE;
KR[21].TMRCL.TCur := 0.000000e+000;
KR[21].TMRCL.TClose := 130.0;
KR[21].TMRCL.TLess := 0.5;
KR[21].TMRCL.TPrev := 0.000000e+000;
KR[21].TMRCL.Enable := FALSE;
KR[21].TMRCL.Act := FALSE;
KR[21].TMRST.TCur := 0.000000e+000;
KR[21].TMRST.TPrev := 0.000000e+000;
KR[21].TMRST.Enable := FALSE;
KR[21].TMRST.Act := FALSE;
KR[22].KRName := ' ';
KR[22].ToOp := FALSE ;
KR[22].ToCl := FALSE;
KR[22].Opening := FALSE;
KR[22].Closing := FALSE;
KR[22].IsOp := FALSE;
KR[22].IsCl := FALSE;
KR[22].More := FALSE;
KR[22].Less := FALSE;
KR[22].SetPos := FALSE;
KR[22].SetPosOpening := FALSE;
KR[22].SetPosClosing := FALSE;
KR[22].Stop := FALSE;
KR[22].Error := FALSE;
KR[22].VtoOp := FALSE;
KR[22].VtoCl := FALSE;
KR[22].KRType := 0;
KR[22].Pos := 0.000000e+000;
KR[22].PosSp := 0.000000e+000;
KR[22].SpIsOp := 0.000000e+000;
KR[22].SpIsCl := 0.000000e+000;
KR[22].Nch_IsOp :=0;
KR[22].Nch_IsCl := 0;
KR[22].Nch_PV := 0;
KR[22].Nch_Pos := 0;
KR[22].Nch_VtoOp := 0;
KR[22].Nch_VtoCl := 0;
KR[22].TMROP.TCur := 0.000000e+000;
KR[22].TMROP.TOpen := 130.0;
KR[22].TMROP.TMore := 0.5;
KR[22].TMROP.TPrev := 0.000000e+000;
KR[22].TMROP.Enable := FALSE;
KR[22].TMROP.Act := FALSE;
KR[22].TMRCL.TCur := 0.000000e+000;
KR[22].TMRCL.TClose := 130.0;
KR[22].TMRCL.TLess := 0.5;
KR[22].TMRCL.TPrev := 0.000000e+000;
KR[22].TMRCL.Enable := FALSE;
KR[22].TMRCL.Act := FALSE;
KR[22].TMRST.TCur := 0.000000e+000;
KR[22].TMRST.TPrev := 0.000000e+000;
KR[22].TMRST.Enable := FALSE;
KR[22].TMRST.Act := FALSE;
KR[23].KRName := ' ';
KR[23].ToOp := FALSE ;
KR[23].ToCl := FALSE;
KR[23].Opening := FALSE;
KR[23].Closing := FALSE;
KR[23].IsOp := FALSE;
KR[23].IsCl := FALSE;
KR[23].More := FALSE;
KR[23].Less := FALSE;
KR[23].SetPos := FALSE;
KR[23].SetPosOpening := FALSE;
KR[23].SetPosClosing := FALSE;
KR[23].Stop := FALSE;
KR[23].Error := FALSE;
KR[23].VtoOp := FALSE;
KR[23].VtoCl := FALSE;
KR[23].KRType := 0;
KR[23].Pos := 0.000000e+000;
KR[23].PosSp := 0.000000e+000;
KR[23].SpIsOp := 0.000000e+000;
KR[23].SpIsCl := 0.000000e+000;
KR[23].Nch_IsOp :=0;
KR[23].Nch_IsCl := 0;
KR[23].Nch_PV := 0;
KR[23].Nch_Pos := 0;
KR[23].Nch_VtoOp := 0;
KR[23].Nch_VtoCl := 0;
KR[23].TMROP.TCur := 0.000000e+000;
KR[23].TMROP.TOpen := 130.0;
KR[23].TMROP.TMore := 0.5;
KR[23].TMROP.TPrev := 0.000000e+000;
KR[23].TMROP.Enable := FALSE;
KR[23].TMROP.Act := FALSE;
KR[23].TMRCL.TCur := 0.000000e+000;
KR[23].TMRCL.TClose := 130.0;
KR[23].TMRCL.TLess := 0.5;
KR[23].TMRCL.TPrev := 0.000000e+000;
KR[23].TMRCL.Enable := FALSE;
KR[23].TMRCL.Act := FALSE;
KR[23].TMRST.TCur := 0.000000e+000;
KR[23].TMRST.TPrev := 0.000000e+000;
KR[23].TMRST.Enable := FALSE;
KR[23].TMRST.Act := FALSE;
KR[24].KRName := ' ';
KR[24].ToOp := FALSE ;
KR[24].ToCl := FALSE;
KR[24].Opening := FALSE;
KR[24].Closing := FALSE;
KR[24].IsOp := FALSE;
KR[24].IsCl := FALSE;
KR[24].More := FALSE;
KR[24].Less := FALSE;
KR[24].SetPos := FALSE;
KR[24].SetPosOpening := FALSE;
KR[24].SetPosClosing := FALSE;
KR[24].Stop := FALSE;
KR[24].Error := FALSE;
KR[24].VtoOp := FALSE;
KR[24].VtoCl := FALSE;
KR[24].KRType := 0;
KR[24].Pos := 0.000000e+000;
KR[24].PosSp := 0.000000e+000;
KR[24].SpIsOp := 0.000000e+000;
KR[24].SpIsCl := 0.000000e+000;
KR[24].Nch_IsOp :=0;
KR[24].Nch_IsCl := 0;
KR[24].Nch_PV := 0;
KR[24].Nch_Pos := 0;
KR[24].Nch_VtoOp := 0;
KR[24].Nch_VtoCl := 0;
KR[24].TMROP.TCur := 0.000000e+000;
KR[24].TMROP.TOpen := 130.0;
KR[24].TMROP.TMore := 0.5;
KR[24].TMROP.TPrev := 0.000000e+000;
KR[24].TMROP.Enable := FALSE;
KR[24].TMROP.Act := FALSE;
KR[24].TMRCL.TCur := 0.000000e+000;
KR[24].TMRCL.TClose := 130.0;
KR[24].TMRCL.TLess := 0.5;
KR[24].TMRCL.TPrev := 0.000000e+000;
KR[24].TMRCL.Enable := FALSE;
KR[24].TMRCL.Act := FALSE;
KR[24].TMRST.TCur := 0.000000e+000;
KR[24].TMRST.TPrev := 0.000000e+000;
KR[24].TMRST.Enable := FALSE;
KR[24].TMRST.Act := FALSE;
KR[25].KRName := ' ';
KR[25].ToOp := FALSE ;
KR[25].ToCl := FALSE;
KR[25].Opening := FALSE;
KR[25].Closing := FALSE;
KR[25].IsOp := FALSE;
KR[25].IsCl := FALSE;
KR[25].More := FALSE;
KR[25].Less := FALSE;
KR[25].SetPos := FALSE;
KR[25].SetPosOpening := FALSE;
KR[25].SetPosClosing := FALSE;
KR[25].Stop := FALSE;
KR[25].Error := FALSE;
KR[25].VtoOp := FALSE;
KR[25].VtoCl := FALSE;
KR[25].KRType := 0;
KR[25].Pos := 0.000000e+000;
KR[25].PosSp := 0.000000e+000;
KR[25].SpIsOp := 0.000000e+000;
KR[25].SpIsCl := 0.000000e+000;
KR[25].Nch_IsOp :=0;
KR[25].Nch_IsCl := 0;
KR[25].Nch_PV := 0;
KR[25].Nch_Pos := 0;
KR[25].Nch_VtoOp := 0;
KR[25].Nch_VtoCl := 0;
KR[25].TMROP.TCur := 0.000000e+000;
KR[25].TMROP.TOpen := 130.0;
KR[25].TMROP.TMore := 0.5;
KR[25].TMROP.TPrev := 0.000000e+000;
KR[25].TMROP.Enable := FALSE;
KR[25].TMROP.Act := FALSE;
KR[25].TMRCL.TCur := 0.000000e+000;
KR[25].TMRCL.TClose := 130.0;
KR[25].TMRCL.TLess := 0.5;
KR[25].TMRCL.TPrev := 0.000000e+000;
KR[25].TMRCL.Enable := FALSE;
KR[25].TMRCL.Act := FALSE;
KR[25].TMRST.TCur := 0.000000e+000;
KR[25].TMRST.TPrev := 0.000000e+000;
KR[25].TMRST.Enable := FALSE;
KR[25].TMRST.Act := FALSE;
KR[26].KRName := ' ';
KR[26].ToOp := FALSE ;
KR[26].ToCl := FALSE;
KR[26].Opening := FALSE;
KR[26].Closing := FALSE;
KR[26].IsOp := FALSE;
KR[26].IsCl := FALSE;
KR[26].More := FALSE;
KR[26].Less := FALSE;
KR[26].SetPos := FALSE;
KR[26].SetPosOpening := FALSE;
KR[26].SetPosClosing := FALSE;
KR[26].Stop := FALSE;
KR[26].Error := FALSE;
KR[26].VtoOp := FALSE;
KR[26].VtoCl := FALSE;
KR[26].KRType := 0;
KR[26].Pos := 0.000000e+000;
KR[26].PosSp := 0.000000e+000;
KR[26].SpIsOp := 0.000000e+000;
KR[26].SpIsCl := 0.000000e+000;
KR[26].Nch_IsOp :=0;
KR[26].Nch_IsCl := 0;
KR[26].Nch_PV := 0;
KR[26].Nch_Pos := 0;
KR[26].Nch_VtoOp := 0;
KR[26].Nch_VtoCl := 0;
KR[26].TMROP.TCur := 0.000000e+000;
KR[26].TMROP.TOpen := 130.0;
KR[26].TMROP.TMore := 0.5;
KR[26].TMROP.TPrev := 0.000000e+000;
KR[26].TMROP.Enable := FALSE;
KR[26].TMROP.Act := FALSE;
KR[26].TMRCL.TCur := 0.000000e+000;
KR[26].TMRCL.TClose := 130.0;
KR[26].TMRCL.TLess := 0.5;
KR[26].TMRCL.TPrev := 0.000000e+000;
KR[26].TMRCL.Enable := FALSE;
KR[26].TMRCL.Act := FALSE;
KR[26].TMRST.TCur := 0.000000e+000;
KR[26].TMRST.TPrev := 0.000000e+000;
KR[26].TMRST.Enable := FALSE;
KR[26].TMRST.Act := FALSE;
KR[27].KRName := ' ';
KR[27].ToOp := FALSE ;
KR[27].ToCl := FALSE;
KR[27].Opening := FALSE;
KR[27].Closing := FALSE;
KR[27].IsOp := FALSE;
KR[27].IsCl := FALSE;
KR[27].More := FALSE;
KR[27].Less := FALSE;
KR[27].SetPos := FALSE;
KR[27].SetPosOpening := FALSE;
KR[27].SetPosClosing := FALSE;
KR[27].Stop := FALSE;
KR[27].Error := FALSE;
KR[27].VtoOp := FALSE;
KR[27].VtoCl := FALSE;
KR[27].KRType := 0;
KR[27].Pos := 0.000000e+000;
KR[27].PosSp := 0.000000e+000;
KR[27].SpIsOp := 0.000000e+000;
KR[27].SpIsCl := 0.000000e+000;
KR[27].Nch_IsOp :=0;
KR[27].Nch_IsCl := 0;
KR[27].Nch_PV := 0;
KR[27].Nch_Pos := 0;
KR[27].Nch_VtoOp := 0;
KR[27].Nch_VtoCl := 0;
KR[27].TMROP.TCur := 0.000000e+000;
KR[27].TMROP.TOpen := 130.0;
KR[27].TMROP.TMore := 0.5;
KR[27].TMROP.TPrev := 0.000000e+000;
KR[27].TMROP.Enable := FALSE;
KR[27].TMROP.Act := FALSE;
KR[27].TMRCL.TCur := 0.000000e+000;
KR[27].TMRCL.TClose := 130.0;
KR[27].TMRCL.TLess := 0.5;
KR[27].TMRCL.TPrev := 0.000000e+000;
KR[27].TMRCL.Enable := FALSE;
KR[27].TMRCL.Act := FALSE;
KR[27].TMRST.TCur := 0.000000e+000;
KR[27].TMRST.TPrev := 0.000000e+000;
KR[27].TMRST.Enable := FALSE;
KR[27].TMRST.Act := FALSE;
KR[28].KRName := ' ';
KR[28].ToOp := FALSE ;
KR[28].ToCl := FALSE;
KR[28].Opening := FALSE;
KR[28].Closing := FALSE;
KR[28].IsOp := FALSE;
KR[28].IsCl := FALSE;
KR[28].More := FALSE;
KR[28].Less := FALSE;
KR[28].SetPos := FALSE;
KR[28].SetPosOpening := FALSE;
KR[28].SetPosClosing := FALSE;
KR[28].Stop := FALSE;
KR[28].Error := FALSE;
KR[28].VtoOp := FALSE;
KR[28].VtoCl := FALSE;
KR[28].KRType := 0;
KR[28].Pos := 0.000000e+000;
KR[28].PosSp := 0.000000e+000;
KR[28].SpIsOp := 0.000000e+000;
KR[28].SpIsCl := 0.000000e+000;
KR[28].Nch_IsOp :=0;
KR[28].Nch_IsCl := 0;
KR[28].Nch_PV := 0;
KR[28].Nch_Pos := 0;
KR[28].Nch_VtoOp := 0;
KR[28].Nch_VtoCl := 0;
KR[28].TMROP.TCur := 0.000000e+000;
KR[28].TMROP.TOpen := 130.0;
KR[28].TMROP.TMore := 0.5;
KR[28].TMROP.TPrev := 0.000000e+000;
KR[28].TMROP.Enable := FALSE;
KR[28].TMROP.Act := FALSE;
KR[28].TMRCL.TCur := 0.000000e+000;
KR[28].TMRCL.TClose := 130.0;
KR[28].TMRCL.TLess := 0.5;
KR[28].TMRCL.TPrev := 0.000000e+000;
KR[28].TMRCL.Enable := FALSE;
KR[28].TMRCL.Act := FALSE;
KR[28].TMRST.TCur := 0.000000e+000;
KR[28].TMRST.TPrev := 0.000000e+000;
KR[28].TMRST.Enable := FALSE;
KR[28].TMRST.Act := FALSE;
KR[29].KRName := ' ';
KR[29].ToOp := FALSE ;
KR[29].ToCl := FALSE;
KR[29].Opening := FALSE;
KR[29].Closing := FALSE;
KR[29].IsOp := FALSE;
KR[29].IsCl := FALSE;
KR[29].More := FALSE;
KR[29].Less := FALSE;
KR[29].SetPos := FALSE;
KR[29].SetPosOpening := FALSE;
KR[29].SetPosClosing := FALSE;
KR[29].Stop := FALSE;
KR[29].Error := FALSE;
KR[29].VtoOp := FALSE;
KR[29].VtoCl := FALSE;
KR[29].KRType := 0;
KR[29].Pos := 0.000000e+000;
KR[29].PosSp := 0.000000e+000;
KR[29].SpIsOp := 0.000000e+000;
KR[29].SpIsCl := 0.000000e+000;
KR[29].Nch_IsOp :=0;
KR[29].Nch_IsCl := 0;
KR[29].Nch_PV := 0;
KR[29].Nch_Pos := 0;
KR[29].Nch_VtoOp := 0;
KR[29].Nch_VtoCl := 0;
KR[29].TMROP.TCur := 0.000000e+000;
KR[29].TMROP.TOpen := 130.0;
KR[29].TMROP.TMore := 0.5;
KR[29].TMROP.TPrev := 0.000000e+000;
KR[29].TMROP.Enable := FALSE;
KR[29].TMROP.Act := FALSE;
KR[29].TMRCL.TCur := 0.000000e+000;
KR[29].TMRCL.TClose := 130.0;
KR[29].TMRCL.TLess := 0.5;
KR[29].TMRCL.TPrev := 0.000000e+000;
KR[29].TMRCL.Enable := FALSE;
KR[29].TMRCL.Act := FALSE;
KR[29].TMRST.TCur := 0.000000e+000;
KR[29].TMRST.TPrev := 0.000000e+000;
KR[29].TMRST.Enable := FALSE;
KR[29].TMRST.Act := FALSE;
KR[30].KRName := ' ';
KR[30].ToOp := FALSE ;
KR[30].ToCl := FALSE;
KR[30].Opening := FALSE;
KR[30].Closing := FALSE;
KR[30].IsOp := FALSE;
KR[30].IsCl := FALSE;
KR[30].More := FALSE;
KR[30].Less := FALSE;
KR[30].SetPos := FALSE;
KR[30].SetPosOpening := FALSE;
KR[30].SetPosClosing := FALSE;
KR[30].Stop := FALSE;
KR[30].Error := FALSE;
KR[30].VtoOp := FALSE;
KR[30].VtoCl := FALSE;
KR[30].KRType := 0;
KR[30].Pos := 0.000000e+000;
KR[30].PosSp := 0.000000e+000;
KR[30].SpIsOp := 0.000000e+000;
KR[30].SpIsCl := 0.000000e+000;
KR[30].Nch_IsOp :=0;
KR[30].Nch_IsCl := 0;
KR[30].Nch_PV := 0;
KR[30].Nch_Pos := 0;
KR[30].Nch_VtoOp := 0;
KR[30].Nch_VtoCl := 0;
KR[30].TMROP.TCur := 0.000000e+000;
KR[30].TMROP.TOpen := 130.0;
KR[30].TMROP.TMore := 0.5;
KR[30].TMROP.TPrev := 0.000000e+000;
KR[30].TMROP.Enable := FALSE;
KR[30].TMROP.Act := FALSE;
KR[30].TMRCL.TCur := 0.000000e+000;
KR[30].TMRCL.TClose := 130.0;
KR[30].TMRCL.TLess := 0.5;
KR[30].TMRCL.TPrev := 0.000000e+000;
KR[30].TMRCL.Enable := FALSE;
KR[30].TMRCL.Act := FALSE;
KR[30].TMRST.TCur := 0.000000e+000;
KR[30].TMRST.TPrev := 0.000000e+000;
KR[30].TMRST.Enable := FALSE;
KR[30].TMRST.Act := FALSE;
KR[31].KRName := ' ';
KR[31].ToOp := FALSE ;
KR[31].ToCl := FALSE;
KR[31].Opening := FALSE;
KR[31].Closing := FALSE;
KR[31].IsOp := FALSE;
KR[31].IsCl := FALSE;
KR[31].More := FALSE;
KR[31].Less := FALSE;
KR[31].SetPos := FALSE;
KR[31].SetPosOpening := FALSE;
KR[31].SetPosClosing := FALSE;
KR[31].Stop := FALSE;
KR[31].Error := FALSE;
KR[31].VtoOp := FALSE;
KR[31].VtoCl := FALSE;
KR[31].KRType := 0;
KR[31].Pos := 0.000000e+000;
KR[31].PosSp := 0.000000e+000;
KR[31].SpIsOp := 0.000000e+000;
KR[31].SpIsCl := 0.000000e+000;
KR[31].Nch_IsOp :=0;
KR[31].Nch_IsCl := 0;
KR[31].Nch_PV := 0;
KR[31].Nch_Pos := 0;
KR[31].Nch_VtoOp := 0;
KR[31].Nch_VtoCl := 0;
KR[31].TMROP.TCur := 0.000000e+000;
KR[31].TMROP.TOpen := 130.0;
KR[31].TMROP.TMore := 0.5;
KR[31].TMROP.TPrev := 0.000000e+000;
KR[31].TMROP.Enable := FALSE;
KR[31].TMROP.Act := FALSE;
KR[31].TMRCL.TCur := 0.000000e+000;
KR[31].TMRCL.TClose := 130.0;
KR[31].TMRCL.TLess := 0.5;
KR[31].TMRCL.TPrev := 0.000000e+000;
KR[31].TMRCL.Enable := FALSE;
KR[31].TMRCL.Act := FALSE;
KR[31].TMRST.TCur := 0.000000e+000;
KR[31].TMRST.TPrev := 0.000000e+000;
KR[31].TMRST.Enable := FALSE;
KR[31].TMRST.Act := FALSE;
KR[32].KRName := ' ';
KR[32].ToOp := FALSE ;
KR[32].ToCl := FALSE;
KR[32].Opening := FALSE;
KR[32].Closing := FALSE;
KR[32].IsOp := FALSE;
KR[32].IsCl := FALSE;
KR[32].More := FALSE;
KR[32].Less := FALSE;
KR[32].SetPos := FALSE;
KR[32].SetPosOpening := FALSE;
KR[32].SetPosClosing := FALSE;
KR[32].Stop := FALSE;
KR[32].Error := FALSE;
KR[32].VtoOp := FALSE;
KR[32].VtoCl := FALSE;
KR[32].KRType := 0;
KR[32].Pos := 0.000000e+000;
KR[32].PosSp := 0.000000e+000;
KR[32].SpIsOp := 0.000000e+000;
KR[32].SpIsCl := 0.000000e+000;
KR[32].Nch_IsOp :=0;
KR[32].Nch_IsCl := 0;
KR[32].Nch_PV := 0;
KR[32].Nch_Pos := 0;
KR[32].Nch_VtoOp := 0;
KR[32].Nch_VtoCl := 0;
KR[32].TMROP.TCur := 0.000000e+000;
KR[32].TMROP.TOpen := 130.0;
KR[32].TMROP.TMore := 0.5;
KR[32].TMROP.TPrev := 0.000000e+000;
KR[32].TMROP.Enable := FALSE;
KR[32].TMROP.Act := FALSE;
KR[32].TMRCL.TCur := 0.000000e+000;
KR[32].TMRCL.TClose := 130.0;
KR[32].TMRCL.TLess := 0.5;
KR[32].TMRCL.TPrev := 0.000000e+000;
KR[32].TMRCL.Enable := FALSE;
KR[32].TMRCL.Act := FALSE;
KR[32].TMRST.TCur := 0.000000e+000;
KR[32].TMRST.TPrev := 0.000000e+000;
KR[32].TMRST.Enable := FALSE;
KR[32].TMRST.Act := FALSE;
KR[33].KRName := ' ';
KR[33].ToOp := FALSE ;
KR[33].ToCl := FALSE;
KR[33].Opening := FALSE;
KR[33].Closing := FALSE;
KR[33].IsOp := FALSE;
KR[33].IsCl := FALSE;
KR[33].More := FALSE;
KR[33].Less := FALSE;
KR[33].SetPos := FALSE;
KR[33].SetPosOpening := FALSE;
KR[33].SetPosClosing := FALSE;
KR[33].Stop := FALSE;
KR[33].Error := FALSE;
KR[33].VtoOp := FALSE;
KR[33].VtoCl := FALSE;
KR[33].KRType := 0;
KR[33].Pos := 0.000000e+000;
KR[33].PosSp := 0.000000e+000;
KR[33].SpIsOp := 0.000000e+000;
KR[33].SpIsCl := 0.000000e+000;
KR[33].Nch_IsOp :=0;
KR[33].Nch_IsCl := 0;
KR[33].Nch_PV := 0;
KR[33].Nch_Pos := 0;
KR[33].Nch_VtoOp := 0;
KR[33].Nch_VtoCl := 0;
KR[33].TMROP.TCur := 0.000000e+000;
KR[33].TMROP.TOpen := 130.0;
KR[33].TMROP.TMore := 0.5;
KR[33].TMROP.TPrev := 0.000000e+000;
KR[33].TMROP.Enable := FALSE;
KR[33].TMROP.Act := FALSE;
KR[33].TMRCL.TCur := 0.000000e+000;
KR[33].TMRCL.TClose := 130.0;
KR[33].TMRCL.TLess := 0.5;
KR[33].TMRCL.TPrev := 0.000000e+000;
KR[33].TMRCL.Enable := FALSE;
KR[33].TMRCL.Act := FALSE;
KR[33].TMRST.TCur := 0.000000e+000;
KR[33].TMRST.TPrev := 0.000000e+000;
KR[33].TMRST.Enable := FALSE;
KR[33].TMRST.Act := FALSE;
KR[34].KRName := ' ';
KR[34].ToOp := FALSE ;
KR[34].ToCl := FALSE;
KR[34].Opening := FALSE;
KR[34].Closing := FALSE;
KR[34].IsOp := FALSE;
KR[34].IsCl := FALSE;
KR[34].More := FALSE;
KR[34].Less := FALSE;
KR[34].SetPos := FALSE;
KR[34].SetPosOpening := FALSE;
KR[34].SetPosClosing := FALSE;
KR[34].Stop := FALSE;
KR[34].Error := FALSE;
KR[34].VtoOp := FALSE;
KR[34].VtoCl := FALSE;
KR[34].KRType := 0;
KR[34].Pos := 0.000000e+000;
KR[34].PosSp := 0.000000e+000;
KR[34].SpIsOp := 0.000000e+000;
KR[34].SpIsCl := 0.000000e+000;
KR[34].Nch_IsOp :=0;
KR[34].Nch_IsCl := 0;
KR[34].Nch_PV := 0;
KR[34].Nch_Pos := 0;
KR[34].Nch_VtoOp := 0;
KR[34].Nch_VtoCl := 0;
KR[34].TMROP.TCur := 0.000000e+000;
KR[34].TMROP.TOpen := 130.0;
KR[34].TMROP.TMore := 0.5;
KR[34].TMROP.TPrev := 0.000000e+000;
KR[34].TMROP.Enable := FALSE;
KR[34].TMROP.Act := FALSE;
KR[34].TMRCL.TCur := 0.000000e+000;
KR[34].TMRCL.TClose := 130.0;
KR[34].TMRCL.TLess := 0.5;
KR[34].TMRCL.TPrev := 0.000000e+000;
KR[34].TMRCL.Enable := FALSE;
KR[34].TMRCL.Act := FALSE;
KR[34].TMRST.TCur := 0.000000e+000;
KR[34].TMRST.TPrev := 0.000000e+000;
KR[34].TMRST.Enable := FALSE;
KR[34].TMRST.Act := FALSE;
KR[35].KRName := ' ';
KR[35].ToOp := FALSE ;
KR[35].ToCl := FALSE;
KR[35].Opening := FALSE;
KR[35].Closing := FALSE;
KR[35].IsOp := FALSE;
KR[35].IsCl := FALSE;
KR[35].More := FALSE;
KR[35].Less := FALSE;
KR[35].SetPos := FALSE;
KR[35].SetPosOpening := FALSE;
KR[35].SetPosClosing := FALSE;
KR[35].Stop := FALSE;
KR[35].Error := FALSE;
KR[35].VtoOp := FALSE;
KR[35].VtoCl := FALSE;
KR[35].KRType := 0;
KR[35].Pos := 0.000000e+000;
KR[35].PosSp := 0.000000e+000;
KR[35].SpIsOp := 0.000000e+000;
KR[35].SpIsCl := 0.000000e+000;
KR[35].Nch_IsOp :=0;
KR[35].Nch_IsCl := 0;
KR[35].Nch_PV := 0;
KR[35].Nch_Pos := 0;
KR[35].Nch_VtoOp := 0;
KR[35].Nch_VtoCl := 0;
KR[35].TMROP.TCur := 0.000000e+000;
KR[35].TMROP.TOpen := 130.0;
KR[35].TMROP.TMore := 0.5;
KR[35].TMROP.TPrev := 0.000000e+000;
KR[35].TMROP.Enable := FALSE;
KR[35].TMROP.Act := FALSE;
KR[35].TMRCL.TCur := 0.000000e+000;
KR[35].TMRCL.TClose := 130.0;
KR[35].TMRCL.TLess := 0.5;
KR[35].TMRCL.TPrev := 0.000000e+000;
KR[35].TMRCL.Enable := FALSE;
KR[35].TMRCL.Act := FALSE;
KR[35].TMRST.TCur := 0.000000e+000;
KR[35].TMRST.TPrev := 0.000000e+000;
KR[35].TMRST.Enable := FALSE;
KR[35].TMRST.Act := FALSE;
KR[36].KRName := ' ';
KR[36].ToOp := FALSE ;
KR[36].ToCl := FALSE;
KR[36].Opening := FALSE;
KR[36].Closing := FALSE;
KR[36].IsOp := FALSE;
KR[36].IsCl := FALSE;
KR[36].More := FALSE;
KR[36].Less := FALSE;
KR[36].SetPos := FALSE;
KR[36].SetPosOpening := FALSE;
KR[36].SetPosClosing := FALSE;
KR[36].Stop := FALSE;
KR[36].Error := FALSE;
KR[36].VtoOp := FALSE;
KR[36].VtoCl := FALSE;
KR[36].KRType := 0;
KR[36].Pos := 0.000000e+000;
KR[36].PosSp := 0.000000e+000;
KR[36].SpIsOp := 0.000000e+000;
KR[36].SpIsCl := 0.000000e+000;
KR[36].Nch_IsOp :=0;
KR[36].Nch_IsCl := 0;
KR[36].Nch_PV := 0;
KR[36].Nch_Pos := 0;
KR[36].Nch_VtoOp := 0;
KR[36].Nch_VtoCl := 0;
KR[36].TMROP.TCur := 0.000000e+000;
KR[36].TMROP.TOpen := 130.0;
KR[36].TMROP.TMore := 0.5;
KR[36].TMROP.TPrev := 0.000000e+000;
KR[36].TMROP.Enable := FALSE;
KR[36].TMROP.Act := FALSE;
KR[36].TMRCL.TCur := 0.000000e+000;
KR[36].TMRCL.TClose := 130.0;
KR[36].TMRCL.TLess := 0.5;
KR[36].TMRCL.TPrev := 0.000000e+000;
KR[36].TMRCL.Enable := FALSE;
KR[36].TMRCL.Act := FALSE;
KR[36].TMRST.TCur := 0.000000e+000;
KR[36].TMRST.TPrev := 0.000000e+000;
KR[36].TMRST.Enable := FALSE;
KR[36].TMRST.Act := FALSE;
KR[37].KRName := ' ';
KR[37].ToOp := FALSE ;
KR[37].ToCl := FALSE;
KR[37].Opening := FALSE;
KR[37].Closing := FALSE;
KR[37].IsOp := FALSE;
KR[37].IsCl := FALSE;
KR[37].More := FALSE;
KR[37].Less := FALSE;
KR[37].SetPos := FALSE;
KR[37].SetPosOpening := FALSE;
KR[37].SetPosClosing := FALSE;
KR[37].Stop := FALSE;
KR[37].Error := FALSE;
KR[37].VtoOp := FALSE;
KR[37].VtoCl := FALSE;
KR[37].KRType := 0;
KR[37].Pos := 0.000000e+000;
KR[37].PosSp := 0.000000e+000;
KR[37].SpIsOp := 0.000000e+000;
KR[37].SpIsCl := 0.000000e+000;
KR[37].Nch_IsOp :=0;
KR[37].Nch_IsCl := 0;
KR[37].Nch_PV := 0;
KR[37].Nch_Pos := 0;
KR[37].Nch_VtoOp := 0;
KR[37].Nch_VtoCl := 0;
KR[37].TMROP.TCur := 0.000000e+000;
KR[37].TMROP.TOpen := 130.0;
KR[37].TMROP.TMore := 0.5;
KR[37].TMROP.TPrev := 0.000000e+000;
KR[37].TMROP.Enable := FALSE;
KR[37].TMROP.Act := FALSE;
KR[37].TMRCL.TCur := 0.000000e+000;
KR[37].TMRCL.TClose := 130.0;
KR[37].TMRCL.TLess := 0.5;
KR[37].TMRCL.TPrev := 0.000000e+000;
KR[37].TMRCL.Enable := FALSE;
KR[37].TMRCL.Act := FALSE;
KR[37].TMRST.TCur := 0.000000e+000;
KR[37].TMRST.TPrev := 0.000000e+000;
KR[37].TMRST.Enable := FALSE;
KR[37].TMRST.Act := FALSE;
KR[38].KRName := ' ';
KR[38].ToOp := FALSE ;
KR[38].ToCl := FALSE;
KR[38].Opening := FALSE;
KR[38].Closing := FALSE;
KR[38].IsOp := FALSE;
KR[38].IsCl := FALSE;
KR[38].More := FALSE;
KR[38].Less := FALSE;
KR[38].SetPos := FALSE;
KR[38].SetPosOpening := FALSE;
KR[38].SetPosClosing := FALSE;
KR[38].Stop := FALSE;
KR[38].Error := FALSE;
KR[38].VtoOp := FALSE;
KR[38].VtoCl := FALSE;
KR[38].KRType := 0;
KR[38].Pos := 0.000000e+000;
KR[38].PosSp := 0.000000e+000;
KR[38].SpIsOp := 0.000000e+000;
KR[38].SpIsCl := 0.000000e+000;
KR[38].Nch_IsOp :=0;
KR[38].Nch_IsCl := 0;
KR[38].Nch_PV := 0;
KR[38].Nch_Pos := 0;
KR[38].Nch_VtoOp := 0;
KR[38].Nch_VtoCl := 0;
KR[38].TMROP.TCur := 0.000000e+000;
KR[38].TMROP.TOpen := 130.0;
KR[38].TMROP.TMore := 0.5;
KR[38].TMROP.TPrev := 0.000000e+000;
KR[38].TMROP.Enable := FALSE;
KR[38].TMROP.Act := FALSE;
KR[38].TMRCL.TCur := 0.000000e+000;
KR[38].TMRCL.TClose := 130.0;
KR[38].TMRCL.TLess := 0.5;
KR[38].TMRCL.TPrev := 0.000000e+000;
KR[38].TMRCL.Enable := FALSE;
KR[38].TMRCL.Act := FALSE;
KR[38].TMRST.TCur := 0.000000e+000;
KR[38].TMRST.TPrev := 0.000000e+000;
KR[38].TMRST.Enable := FALSE;
KR[38].TMRST.Act := FALSE;
KR[39].KRName := ' ';
KR[39].ToOp := FALSE ;
KR[39].ToCl := FALSE;
KR[39].Opening := FALSE;
KR[39].Closing := FALSE;
KR[39].IsOp := FALSE;
KR[39].IsCl := FALSE;
KR[39].More := FALSE;
KR[39].Less := FALSE;
KR[39].SetPos := FALSE;
KR[39].SetPosOpening := FALSE;
KR[39].SetPosClosing := FALSE;
KR[39].Stop := FALSE;
KR[39].Error := FALSE;
KR[39].VtoOp := FALSE;
KR[39].VtoCl := FALSE;
KR[39].KRType := 0;
KR[39].Pos := 0.000000e+000;
KR[39].PosSp := 0.000000e+000;
KR[39].SpIsOp := 0.000000e+000;
KR[39].SpIsCl := 0.000000e+000;
KR[39].Nch_IsOp :=0;
KR[39].Nch_IsCl := 0;
KR[39].Nch_PV := 0;
KR[39].Nch_Pos := 0;
KR[39].Nch_VtoOp := 0;
KR[39].Nch_VtoCl := 0;
KR[39].TMROP.TCur := 0.000000e+000;
KR[39].TMROP.TOpen := 130.0;
KR[39].TMROP.TMore := 0.5;
KR[39].TMROP.TPrev := 0.000000e+000;
KR[39].TMROP.Enable := FALSE;
KR[39].TMROP.Act := FALSE;
KR[39].TMRCL.TCur := 0.000000e+000;
KR[39].TMRCL.TClose := 130.0;
KR[39].TMRCL.TLess := 0.5;
KR[39].TMRCL.TPrev := 0.000000e+000;
KR[39].TMRCL.Enable := FALSE;
KR[39].TMRCL.Act := FALSE;
KR[39].TMRST.TCur := 0.000000e+000;
KR[39].TMRST.TPrev := 0.000000e+000;
KR[39].TMRST.Enable := FALSE;
KR[39].TMRST.Act := FALSE;
KR[40].KRName := ' ';
KR[40].ToOp := FALSE ;
KR[40].ToCl := FALSE;
KR[40].Opening := FALSE;
KR[40].Closing := FALSE;
KR[40].IsOp := FALSE;
KR[40].IsCl := FALSE;
KR[40].More := FALSE;
KR[40].Less := FALSE;
KR[40].SetPos := FALSE;
KR[40].SetPosOpening := FALSE;
KR[40].SetPosClosing := FALSE;
KR[40].Stop := FALSE;
KR[40].Error := FALSE;
KR[40].VtoOp := FALSE;
KR[40].VtoCl := FALSE;
KR[40].KRType := 0;
KR[40].Pos := 0.000000e+000;
KR[40].PosSp := 0.000000e+000;
KR[40].SpIsOp := 0.000000e+000;
KR[40].SpIsCl := 0.000000e+000;
KR[40].Nch_IsOp :=0;
KR[40].Nch_IsCl := 0;
KR[40].Nch_PV := 0;
KR[40].Nch_Pos := 0;
KR[40].Nch_VtoOp := 0;
KR[40].Nch_VtoCl := 0;
KR[40].TMROP.TCur := 0.000000e+000;
KR[40].TMROP.TOpen := 130.0;
KR[40].TMROP.TMore := 0.5;
KR[40].TMROP.TPrev := 0.000000e+000;
KR[40].TMROP.Enable := FALSE;
KR[40].TMROP.Act := FALSE;
KR[40].TMRCL.TCur := 0.000000e+000;
KR[40].TMRCL.TClose := 130.0;
KR[40].TMRCL.TLess := 0.5;
KR[40].TMRCL.TPrev := 0.000000e+000;
KR[40].TMRCL.Enable := FALSE;
KR[40].TMRCL.Act := FALSE;
KR[40].TMRST.TCur := 0.000000e+000;
KR[40].TMRST.TPrev := 0.000000e+000;
KR[40].TMRST.Enable := FALSE;
KR[40].TMRST.Act := FALSE;
KR[41].KRName := ' ';
KR[41].ToOp := FALSE ;
KR[41].ToCl := FALSE;
KR[41].Opening := FALSE;
KR[41].Closing := FALSE;
KR[41].IsOp := FALSE;
KR[41].IsCl := FALSE;
KR[41].More := FALSE;
KR[41].Less := FALSE;
KR[41].SetPos := FALSE;
KR[41].SetPosOpening := FALSE;
KR[41].SetPosClosing := FALSE;
KR[41].Stop := FALSE;
KR[41].Error := FALSE;
KR[41].VtoOp := FALSE;
KR[41].VtoCl := FALSE;
KR[41].KRType := 0;
KR[41].Pos := 0.000000e+000;
KR[41].PosSp := 0.000000e+000;
KR[41].SpIsOp := 0.000000e+000;
KR[41].SpIsCl := 0.000000e+000;
KR[41].Nch_IsOp :=0;
KR[41].Nch_IsCl := 0;
KR[41].Nch_PV := 0;
KR[41].Nch_Pos := 0;
KR[41].Nch_VtoOp := 0;
KR[41].Nch_VtoCl := 0;
KR[41].TMROP.TCur := 0.000000e+000;
KR[41].TMROP.TOpen := 130.0;
KR[41].TMROP.TMore := 0.5;
KR[41].TMROP.TPrev := 0.000000e+000;
KR[41].TMROP.Enable := FALSE;
KR[41].TMROP.Act := FALSE;
KR[41].TMRCL.TCur := 0.000000e+000;
KR[41].TMRCL.TClose := 130.0;
KR[41].TMRCL.TLess := 0.5;
KR[41].TMRCL.TPrev := 0.000000e+000;
KR[41].TMRCL.Enable := FALSE;
KR[41].TMRCL.Act := FALSE;
KR[41].TMRST.TCur := 0.000000e+000;
KR[41].TMRST.TPrev := 0.000000e+000;
KR[41].TMRST.Enable := FALSE;
KR[41].TMRST.Act := FALSE;
KR[42].KRName := ' ';
KR[42].ToOp := FALSE ;
KR[42].ToCl := FALSE;
KR[42].Opening := FALSE;
KR[42].Closing := FALSE;
KR[42].IsOp := FALSE;
KR[42].IsCl := FALSE;
KR[42].More := FALSE;
KR[42].Less := FALSE;
KR[42].SetPos := FALSE;
KR[42].SetPosOpening := FALSE;
KR[42].SetPosClosing := FALSE;
KR[42].Stop := FALSE;
KR[42].Error := FALSE;
KR[42].VtoOp := FALSE;
KR[42].VtoCl := FALSE;
KR[42].KRType := 0;
KR[42].Pos := 0.000000e+000;
KR[42].PosSp := 0.000000e+000;
KR[42].SpIsOp := 0.000000e+000;
KR[42].SpIsCl := 0.000000e+000;
KR[42].Nch_IsOp :=0;
KR[42].Nch_IsCl := 0;
KR[42].Nch_PV := 0;
KR[42].Nch_Pos := 0;
KR[42].Nch_VtoOp := 0;
KR[42].Nch_VtoCl := 0;
KR[42].TMROP.TCur := 0.000000e+000;
KR[42].TMROP.TOpen := 130.0;
KR[42].TMROP.TMore := 0.5;
KR[42].TMROP.TPrev := 0.000000e+000;
KR[42].TMROP.Enable := FALSE;
KR[42].TMROP.Act := FALSE;
KR[42].TMRCL.TCur := 0.000000e+000;
KR[42].TMRCL.TClose := 130.0;
KR[42].TMRCL.TLess := 0.5;
KR[42].TMRCL.TPrev := 0.000000e+000;
KR[42].TMRCL.Enable := FALSE;
KR[42].TMRCL.Act := FALSE;
KR[42].TMRST.TCur := 0.000000e+000;
KR[42].TMRST.TPrev := 0.000000e+000;
KR[42].TMRST.Enable := FALSE;
KR[42].TMRST.Act := FALSE;
KR[43].KRName := ' ';
KR[43].ToOp := FALSE ;
KR[43].ToCl := FALSE;
KR[43].Opening := FALSE;
KR[43].Closing := FALSE;
KR[43].IsOp := FALSE;
KR[43].IsCl := FALSE;
KR[43].More := FALSE;
KR[43].Less := FALSE;
KR[43].SetPos := FALSE;
KR[43].SetPosOpening := FALSE;
KR[43].SetPosClosing := FALSE;
KR[43].Stop := FALSE;
KR[43].Error := FALSE;
KR[43].VtoOp := FALSE;
KR[43].VtoCl := FALSE;
KR[43].KRType := 0;
KR[43].Pos := 0.000000e+000;
KR[43].PosSp := 0.000000e+000;
KR[43].SpIsOp := 0.000000e+000;
KR[43].SpIsCl := 0.000000e+000;
KR[43].Nch_IsOp :=0;
KR[43].Nch_IsCl := 0;
KR[43].Nch_PV := 0;
KR[43].Nch_Pos := 0;
KR[43].Nch_VtoOp := 0;
KR[43].Nch_VtoCl := 0;
KR[43].TMROP.TCur := 0.000000e+000;
KR[43].TMROP.TOpen := 130.0;
KR[43].TMROP.TMore := 0.5;
KR[43].TMROP.TPrev := 0.000000e+000;
KR[43].TMROP.Enable := FALSE;
KR[43].TMROP.Act := FALSE;
KR[43].TMRCL.TCur := 0.000000e+000;
KR[43].TMRCL.TClose := 130.0;
KR[43].TMRCL.TLess := 0.5;
KR[43].TMRCL.TPrev := 0.000000e+000;
KR[43].TMRCL.Enable := FALSE;
KR[43].TMRCL.Act := FALSE;
KR[43].TMRST.TCur := 0.000000e+000;
KR[43].TMRST.TPrev := 0.000000e+000;
KR[43].TMRST.Enable := FALSE;
KR[43].TMRST.Act := FALSE;
KR[44].KRName := ' ';
KR[44].ToOp := FALSE ;
KR[44].ToCl := FALSE;
KR[44].Opening := FALSE;
KR[44].Closing := FALSE;
KR[44].IsOp := FALSE;
KR[44].IsCl := FALSE;
KR[44].More := FALSE;
KR[44].Less := FALSE;
KR[44].SetPos := FALSE;
KR[44].SetPosOpening := FALSE;
KR[44].SetPosClosing := FALSE;
KR[44].Stop := FALSE;
KR[44].Error := FALSE;
KR[44].VtoOp := FALSE;
KR[44].VtoCl := FALSE;
KR[44].KRType := 0;
KR[44].Pos := 0.000000e+000;
KR[44].PosSp := 0.000000e+000;
KR[44].SpIsOp := 0.000000e+000;
KR[44].SpIsCl := 0.000000e+000;
KR[44].Nch_IsOp :=0;
KR[44].Nch_IsCl := 0;
KR[44].Nch_PV := 0;
KR[44].Nch_Pos := 0;
KR[44].Nch_VtoOp := 0;
KR[44].Nch_VtoCl := 0;
KR[44].TMROP.TCur := 0.000000e+000;
KR[44].TMROP.TOpen := 130.0;
KR[44].TMROP.TMore := 0.5;
KR[44].TMROP.TPrev := 0.000000e+000;
KR[44].TMROP.Enable := FALSE;
KR[44].TMROP.Act := FALSE;
KR[44].TMRCL.TCur := 0.000000e+000;
KR[44].TMRCL.TClose := 130.0;
KR[44].TMRCL.TLess := 0.5;
KR[44].TMRCL.TPrev := 0.000000e+000;
KR[44].TMRCL.Enable := FALSE;
KR[44].TMRCL.Act := FALSE;
KR[44].TMRST.TCur := 0.000000e+000;
KR[44].TMRST.TPrev := 0.000000e+000;
KR[44].TMRST.Enable := FALSE;
KR[44].TMRST.Act := FALSE;
